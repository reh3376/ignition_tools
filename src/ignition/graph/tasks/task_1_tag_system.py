"""Task 1: Tag System Expansion

This module contains the extended tag system functions for the Ignition
graph database. These functions provide comprehensive tag management
capabilities across Gateway, Vision, and Perspective contexts.

Target: 25+ additional tag system functions
Priority: HIGH
Contexts: Gateway (primary), Vision, Perspective
Category: tag
"""

from typing import Any


def get_tag_system_extended() -> list[dict[str, Any]]:
    """Get extended tag system functions for Task 1.

    This includes comprehensive tag configuration, historical data access,
    advanced browsing, and tag management functions.

    Returns:
        List of tag system function definitions
    """
    return [
        # Tag Configuration Functions
        {
            "name": "system.tag.configure",
            "description": "Configure tag definitions and properties",
            "category": "tag",
            "contexts": ["Gateway"],
            "scope": "gateway",
            "parameters": ["provider", "tags", "collision"],
            "returns": "QualityCode[]",
            "performance_notes": "Blocking operation, use carefully in loops",
            "usage_notes": "Primary method for creating and modifying tag configurations",
        },
        {
            "name": "system.tag.deleteConfiguration",
            "description": "Delete tag configurations from provider",
            "category": "tag",
            "contexts": ["Gateway"],
            "scope": "gateway",
            "parameters": ["provider", "tagPaths"],
            "returns": "QualityCode[]",
            "performance_notes": "Permanent deletion, cannot be undone",
            "usage_notes": "Use with caution, affects historical data collection",
        },
        {
            "name": "system.tag.copy",
            "description": "Copy tag configurations within or between providers",
            "category": "tag",
            "contexts": ["Gateway"],
            "scope": "gateway",
            "parameters": ["tags", "destination", "collision"],
            "returns": "QualityCode[]",
            "performance_notes": "Efficient for bulk tag creation",
            "usage_notes": "Preserves tag properties and alarm configurations",
        },
        {
            "name": "system.tag.move",
            "description": "Move tag configurations to new location",
            "category": "tag",
            "contexts": ["Gateway"],
            "scope": "gateway",
            "parameters": ["tags", "destination", "collision"],
            "returns": "QualityCode[]",
            "performance_notes": "Affects existing tag references",
            "usage_notes": "Updates historical data paths automatically",
        },
        {
            "name": "system.tag.getConfiguration",
            "description": "Retrieve tag configuration details",
            "category": "tag",
            "contexts": ["Gateway", "Vision", "Perspective"],
            "scope": "all",
            "parameters": ["tagPaths", "recursive"],
            "returns": "Dataset",
            "performance_notes": "Can be expensive for large tag trees",
            "usage_notes": "Use recursive=False for better performance",
        },
        {
            "name": "system.tag.editTags",
            "description": "Edit multiple tag configurations simultaneously",
            "category": "tag",
            "contexts": ["Gateway"],
            "scope": "gateway",
            "parameters": ["tags", "values"],
            "returns": "QualityCode[]",
            "performance_notes": "More efficient than individual configure calls",
            "usage_notes": "Preferred method for bulk tag modifications",
        },
        # Advanced Tag Browsing
        {
            "name": "system.tag.browseTags",
            "description": "Browse tag provider structure with advanced filtering",
            "category": "tag",
            "contexts": ["Gateway", "Vision", "Perspective"],
            "scope": "all",
            "parameters": ["path", "filter", "recursive", "sort"],
            "returns": "BrowseTag[]",
            "performance_notes": "Use filters to reduce result set size",
            "usage_notes": "Supports wildcard patterns and regular expressions",
        },
        {
            "name": "system.tag.browseHistoricalTags",
            "description": "Browse tags with historical data availability",
            "category": "tag",
            "contexts": ["Gateway", "Vision", "Perspective"],
            "scope": "all",
            "parameters": ["path", "startDate", "endDate"],
            "returns": "BrowseTag[]",
            "performance_notes": "Limited by historian storage policies",
            "usage_notes": "Only returns tags with actual historical data",
        },
        {
            "name": "system.tag.browseSimple",
            "description": "Simple tag browsing for basic navigation",
            "category": "tag",
            "contexts": ["Gateway", "Vision", "Perspective"],
            "scope": "all",
            "parameters": ["path", "maxResults"],
            "returns": "String[]",
            "performance_notes": "Fastest browsing method",
            "usage_notes": "Returns only tag names, no metadata",
        },
        # Bulk Tag Operations
        {
            "name": "system.tag.readAll",
            "description": "Read all tags from specified providers",
            "category": "tag",
            "contexts": ["Gateway", "Vision", "Perspective"],
            "scope": "all",
            "parameters": ["providers", "includeStale"],
            "returns": "QualifiedValue[]",
            "performance_notes": "Can return large datasets",
            "usage_notes": "Use with caution on large tag providers",
        },
        {
            "name": "system.tag.writeAll",
            "description": "Write values to all tags in specified paths",
            "category": "tag",
            "contexts": ["Gateway", "Vision", "Perspective"],
            "scope": "all",
            "parameters": ["basePaths", "values", "suppressErrors"],
            "returns": "QualityCode[]",
            "performance_notes": "Efficient for bulk writes",
            "usage_notes": "Matches values to tags by position",
        },
        {
            "name": "system.tag.readBlocking",
            "description": "Enhanced blocking read with timeout and options",
            "category": "tag",
            "contexts": ["Gateway", "Vision", "Perspective"],
            "scope": "all",
            "parameters": ["tagPaths", "timeout", "includeStale", "includeTimestamp"],
            "returns": "QualifiedValue[]",
            "performance_notes": "Blocking operation, specify appropriate timeout",
            "usage_notes": "Default timeout is 45 seconds",
        },
        {
            "name": "system.tag.writeBlocking",
            "description": "Enhanced blocking write with confirmation",
            "category": "tag",
            "contexts": ["Gateway", "Vision", "Perspective"],
            "scope": "all",
            "parameters": ["tagPaths", "values", "timeout", "waitForConfirmation"],
            "returns": "QualityCode[]",
            "performance_notes": "Slower when waiting for confirmation",
            "usage_notes": "Use waitForConfirmation for critical writes",
        },
        # Historical Data Functions
        {
            "name": "system.tag.queryTagHistory",
            "description": "Query historical tag data with advanced options",
            "category": "tag",
            "contexts": ["Gateway", "Vision", "Perspective"],
            "scope": "all",
            "parameters": [
                "paths",
                "startDate",
                "endDate",
                "returnSize",
                "aggregateMode",
                "returnFormat",
            ],
            "returns": "Dataset",
            "performance_notes": "Large queries can impact historian performance",
            "usage_notes": "Use aggregation for better performance on large datasets",
        },
        {
            "name": "system.tag.queryTagCalculations",
            "description": "Perform calculations on historical tag data",
            "category": "tag",
            "contexts": ["Gateway", "Vision", "Perspective"],
            "scope": "all",
            "parameters": [
                "paths",
                "calculations",
                "startDate",
                "endDate",
                "rangeSize",
                "rangeAdvance",
            ],
            "returns": "Dataset",
            "performance_notes": "CPU intensive for complex calculations",
            "usage_notes": "Supports min, max, average, sum, count calculations",
        },
        {
            "name": "system.tag.queryTagDensity",
            "description": "Query the data density of historical tags",
            "category": "tag",
            "contexts": ["Gateway", "Vision", "Perspective"],
            "scope": "all",
            "parameters": ["paths", "startDate", "endDate"],
            "returns": "Dataset",
            "performance_notes": "Useful for storage optimization analysis",
            "usage_notes": "Returns data point counts per time period",
        },
        {
            "name": "system.tag.storeTagHistory",
            "description": "Store historical values for tags",
            "category": "tag",
            "contexts": ["Gateway"],
            "scope": "gateway",
            "parameters": ["provider", "historicalValues"],
            "returns": "QualityCode[]",
            "performance_notes": "Use for importing historical data",
            "usage_notes": "Requires appropriate historical provider configuration",
        },
        # Tag Group Operations
        {
            "name": "system.tag.requestGroupExecution",
            "description": "Request execution of tag group operations",
            "category": "tag",
            "contexts": ["Gateway"],
            "scope": "gateway",
            "parameters": ["provider", "groupPaths"],
            "returns": "None",
            "performance_notes": "Triggers immediate group evaluation",
            "usage_notes": "Used for expression and derived tags",
        },
        {
            "name": "system.tag.setOverlaysEnabled",
            "description": "Enable or disable tag overlays",
            "category": "tag",
            "contexts": ["Gateway"],
            "scope": "gateway",
            "parameters": ["tagPaths", "enabled"],
            "returns": "None",
            "performance_notes": "Affects real-time tag behavior",
            "usage_notes": "Overlays can override tag values temporarily",
        },
        # Import/Export Functions
        {
            "name": "system.tag.loadFromFile",
            "description": "Load tag configurations from file",
            "category": "tag",
            "contexts": ["Gateway"],
            "scope": "gateway",
            "parameters": ["filePath", "provider", "collision"],
            "returns": "QualityCode[]",
            "performance_notes": "File parsing can be slow for large files",
            "usage_notes": "Supports JSON and XML tag export formats",
        },
        {
            "name": "system.tag.exportTags",
            "description": "Export tag configurations to file",
            "category": "tag",
            "contexts": ["Gateway"],
            "scope": "gateway",
            "parameters": ["tagPaths", "filePath", "format", "recursive"],
            "returns": "None",
            "performance_notes": "Large exports can take significant time",
            "usage_notes": "Use for backup and configuration migration",
        },
        {
            "name": "system.tag.importTags",
            "description": "Import tags from external data source",
            "category": "tag",
            "contexts": ["Gateway"],
            "scope": "gateway",
            "parameters": ["dataSource", "mappings", "provider"],
            "returns": "QualityCode[]",
            "performance_notes": "Performance depends on data source",
            "usage_notes": "Supports database and CSV import sources",
        },
        # Tag Subscription Management
        {
            "name": "system.tag.subscribe",
            "description": "Create tag subscriptions for real-time updates",
            "category": "tag",
            "contexts": ["Gateway", "Vision", "Perspective"],
            "scope": "all",
            "parameters": ["tagPaths", "callback", "initialUpdate"],
            "returns": "SubscriptionHandle",
            "performance_notes": "Each subscription uses system resources",
            "usage_notes": "Remember to unsubscribe when no longer needed",
        },
        {
            "name": "system.tag.unsubscribe",
            "description": "Remove tag subscriptions",
            "category": "tag",
            "contexts": ["Gateway", "Vision", "Perspective"],
            "scope": "all",
            "parameters": ["subscriptionHandle"],
            "returns": "None",
            "performance_notes": "Frees subscription resources",
            "usage_notes": "Essential for preventing memory leaks",
        },
        # Tag Utility Functions
        {
            "name": "system.tag.exists",
            "description": "Check if tag paths exist",
            "category": "tag",
            "contexts": ["Gateway", "Vision", "Perspective"],
            "scope": "all",
            "parameters": ["tagPaths"],
            "returns": "boolean[]",
            "performance_notes": "Fast lookup operation",
            "usage_notes": "Useful for validation before read/write operations",
        },
        {
            "name": "system.tag.isStale",
            "description": "Check if tag values are stale",
            "category": "tag",
            "contexts": ["Gateway", "Vision", "Perspective"],
            "scope": "all",
            "parameters": ["tagPaths", "timeout"],
            "returns": "boolean[]",
            "performance_notes": "Based on last update timestamp",
            "usage_notes": "Helps identify communication issues",
        },
        {
            "name": "system.tag.getPermissions",
            "description": "Get tag security permissions for current user",
            "category": "tag",
            "contexts": ["Gateway", "Vision", "Perspective"],
            "scope": "all",
            "parameters": ["tagPaths"],
            "returns": "SecurityLevel[]",
            "performance_notes": "Security evaluation per tag",
            "usage_notes": "Returns read/write/configure permissions",
        },
    ]


def get_task_1_summary() -> dict[str, Any]:
    """Get summary information for Task 1 implementation."""
    return {
        "task_id": 1,
        "name": "Tag System Expansion",
        "description": "Comprehensive tag management and historical data functions",
        "priority": "HIGH",
        "estimated_functions": 27,
        "categories": ["tag"],
        "contexts": ["Gateway", "Vision", "Perspective"],
        "completion_target": "Week 1",
        "dependencies": None,
        "validation_required": [
            "Tag CRUD operations in all contexts",
            "Historical data query performance",
            "Bulk operation efficiency",
            "Context-specific function availability",
        ],
    }

# IGN Scripts Project - Cursor AI Rules

## Initialization Required
Every new agent/chat session must run this initialization:

```python
from ignition.code_intelligence import initialize_agent_knowledge
context = initialize_agent_knowledge()
```

## Project Context
- Name: IGN Scripts - Code Intelligence System
- Phase: 8.1 (Completed)
- Knowledge Bases: Neo4j (3,691+ nodes), Git (65+ commits)
- CLI: 12 refactor commands available
- Key Files: docs/roadmap.md, docs/PHASE_8_1_COMPLETION_SUMMARY.md

## Available Tools
- Automated refactoring with safety guarantees
- Large file detection and intelligent splitting
- Git integration with evolution tracking
- Architecture diagram generation
- Comprehensive impact analysis and reporting

## Quick Commands
- `refactor detect` - Scan for oversized files
- `refactor analyze <file>` - Detailed file analysis
- `refactor statistics` - Show refactoring stats
- See docs/AGENT_KNOWLEDGE_SYSTEM.md for full list

## Important
Always check .agent_context.json for latest project state.
Use knowledge discovery system for consistent project understanding.

## Security and Environment Variables
### CRITICAL SECURITY REQUIREMENT:
- **NEVER hardcode sensitive information** (credentials, IPs, certificates, API keys, passwords, etc.)
- **ALWAYS use .env files** for storing sensitive configuration data
- **ALWAYS use python-dotenv** library to load environment variables
- **ALWAYS import and use os.getenv()** or python-dotenv's load_dotenv() in scripts
- Required imports for environment variable usage:
  ```python
  import os
  from dotenv import load_dotenv
  load_dotenv()  # Load .env file at script start
  ```
- Environment variable usage pattern:
  ```python
  # Good - using environment variables
  server_url = os.getenv('OPCUA_SERVER_URL', 'opc.tcp://localhost:4840')
  username = os.getenv('OPCUA_USERNAME', 'admin')

  # Bad - hardcoded values
  server_url = "opc.tcp://10.4.8.15:62541"
  username = "opcuauser"
  ```
- Always provide sensible defaults for non-sensitive configuration
- Add python-dotenv to requirements.txt if not present
- Update .env.sample with all required environment variable examples

## Python Development Guidelines
- Use type hints for all function parameters and return values
- Follow PEP 8 style guidelines
- Use descriptive variable and function names
- Add docstrings to all functions and classes
- Handle exceptions appropriately with try/except blocks
- Use logging instead of print statements for debugging
- Prefer pathlib over os.path for file operations

## OPC-UA Specific Guidelines
- Always use read-only operations for production safety
- Implement proper certificate validation
- Use secure authentication methods
- Provide comprehensive error handling for connection issues
- Log all OPC-UA operations for audit trails

## Testing and Quality
- Write unit tests for all new functionality
- Use pytest for testing framework
- Achieve minimum 80% test coverage
- Run linting tools (ruff, mypy) before committing
- Follow conventional commit message format

name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write
  packages: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
        service: [mcp, mcp-tools]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Check if service exists
      id: check-service
      run: |
        if [ -d "${{ matrix.service }}" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Service directory ${{ matrix.service }} does not exist, skipping..."
        fi

    - name: Create virtual environment
      if: steps.check-service.outputs.exists == 'true'
      run: |
        cd ${{ matrix.service }}
        uv venv
        source .venv/bin/activate
        if [ -f requirements.txt ]; then
          uv pip install -r requirements.txt
        else
          echo "No requirements.txt found, installing basic test dependencies"
          uv pip install pytest pytest-cov
        fi

    - name: Run tests
      if: steps.check-service.outputs.exists == 'true'
      run: |
        cd ${{ matrix.service }}
        source .venv/bin/activate
        if [ -d tests ]; then
          pytest tests/ --cov=src --cov-report=xml -v || true
        else
          echo "No tests directory found in ${{ matrix.service }}"
        fi

    - name: Upload coverage to Codecov
      if: steps.check-service.outputs.exists == 'true'
      uses: codecov/codecov-action@v4
      with:
        file: ./${{ matrix.service }}/coverage.xml
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
        service: [mcp, mcp-tools]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Check if service exists
      id: check-service
      run: |
        if [ -d "${{ matrix.service }}" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Service directory ${{ matrix.service }} does not exist, skipping..."
        fi

    - name: Create virtual environment
      if: steps.check-service.outputs.exists == 'true'
      run: |
        cd ${{ matrix.service }}
        uv venv
        source .venv/bin/activate
        if [ -f requirements.txt ]; then
          uv pip install -r requirements.txt
        else
          uv pip install ruff mypy
        fi

    - name: Run ruff
      if: steps.check-service.outputs.exists == 'true'
      run: |
        cd ${{ matrix.service }}
        source .venv/bin/activate
        ruff check . --fix || true
        ruff format . || true

    - name: Run mypy
      if: steps.check-service.outputs.exists == 'true'
      run: |
        cd ${{ matrix.service }}
        source .venv/bin/activate
        if [ -d src ]; then
          mypy src --ignore-missing-imports || true
        else
          echo "No src directory found in ${{ matrix.service }}"
        fi

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [mcp, mcp-tools]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Check if service exists
      id: check-service
      run: |
        if [ -d "${{ matrix.service }}" ] && [ -f "${{ matrix.service }}/mkdocs.yml" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Service directory or mkdocs.yml not found for ${{ matrix.service }}, skipping..."
        fi

    - name: Create virtual environment
      if: steps.check-service.outputs.exists == 'true'
      run: |
        cd ${{ matrix.service }}
        uv venv
        source .venv/bin/activate
        if [ -f requirements.txt ]; then
          uv pip install -r requirements.txt
        fi
        uv pip install mkdocs mkdocs-material

    - name: Build documentation
      if: steps.check-service.outputs.exists == 'true'
      run: |
        cd ${{ matrix.service }}
        source .venv/bin/activate
        mkdocs build

    - name: Setup Pages
      if: steps.check-service.outputs.exists == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v4

    - name: Upload to GitHub Pages
      if: steps.check-service.outputs.exists == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./${{ matrix.service }}/site

    - name: Deploy to GitHub Pages
      if: steps.check-service.outputs.exists == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
      id: deployment
      uses: actions/deploy-pages@v4

  build-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push MCP
      if: hashFiles('./mcp/Dockerfile') != ''
      uses: docker/build-push-action@v5
      with:
        context: ./mcp
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/mcp:latest

    - name: Build and push MCP Tools
      if: hashFiles('./mcp-tools/Dockerfile') != ''
      uses: docker/build-push-action@v5
      with:
        context: ./mcp-tools
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/mcp-tools:latest 
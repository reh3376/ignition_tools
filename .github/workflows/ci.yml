name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4.1.1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5.0.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Create virtual environment
      run: uv venv

    - name: Install dependencies
      run: |
        source .venv/bin/activate
        uv cache clean
        uv pip install -r requirements.txt
        uv pip install -e ".[dev]"

    - name: Lint with ruff
      run: |
        source .venv/bin/activate
        ruff check .
        ruff format --check .

    - name: Type check with mypy
      run: |
        source .venv/bin/activate
        mypy src/

    - name: Test with pytest
      run: |
        source .venv/bin/activate
        pytest tests/ --cov=src --cov-report=xml --cov-report=html -v

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.1.1

    - name: Build Docker test image
      run: docker build -t ign-scripts-test .

    - name: Run Docker tests
      run: |
        docker run --rm -v $(pwd):/app ign-scripts-test python -m pytest tests/ -v

    - name: Run Docker performance tests
      run: |
        docker run --rm -v $(pwd):/app ign-scripts-test python -m pytest tests/test_performance.py -v -m performance

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.1.1

    - name: Set up Python
      uses: actions/setup-python@v5.0.0
      with:
        python-version: "3.11"

    - name: Install security tools
      run: |
        python -m pip install bandit safety

    - name: Run security check with bandit
      run: bandit -r src/ -f json -o bandit-report.json || true

    - name: Run safety check
      run: safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4.3.1
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
